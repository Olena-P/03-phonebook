{"version":3,"sources":["Components/Container/Container.styled.js","Components/Container/Container.jsx","Components/ContactForm/ContactForm.styled.js","Components/ContactForm/ContactForm.jsx","Components/ContactList/ContactList.styled.js","Components/ContactList/ContactList.jsx","Components/Filter/Filter.styled.js","Components/Filter/Filter.jsx","Components/App/App.jsx","index.js"],"names":["PhoneBook","styled","div","Title","h1","Container","title","children","Form","form","Input","input","Label","label","Button","button","Error","span","Name","p","Number","ContactForm","onSubmit","initialValues","name","number","validate","values","errors","test","setSubmitting","resetForm","touched","handleChange","handleSubmit","isSubmitting","type","placeholder","onChange","value","disabled","List","ul","Item","li","ContactList","contacts","onDeleteContact","map","id","onClick","propTypes","PropTypes","func","isRequired","InputFilter","LabelFilter","Filter","App","state","contactsList","filter","changeFilter","event","setState","target","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","deleteContact","contactId","prevState","addContact","uuid","find","alert","localStorage","getItem","parsedContact","JSON","parse","this","stringify","setItem","visibleContacts","Component","ReactDOM","render","StrictMode","theme","colors","white","black","green","red","blue","primaryText","secondaryText","document","getElementById"],"mappings":"okBAEaA,EAAYC,IAAOC,IAAV,2QAYTC,EAAQF,IAAOG,GAAV,sD,OCHHC,EATG,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACvB,OACI,eAACP,EAAD,WACKM,GAAS,cAACH,EAAD,UAAQG,IACbC,M,QCJJC,EAAOP,IAAOQ,KAAV,8HAOJC,EAAQT,IAAOU,MAAV,kJASLC,EAAQX,IAAOY,MAAV,sKASLC,EAASb,IAAOc,OAAV,qgBAuBNC,EAAQf,IAAOgB,KAAV,kHAQLC,EAAOjB,IAAOkB,EAAV,6CAIJC,EAASnB,IAAOkB,EAAV,6CC3DJ,SAASE,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SACpC,OACE,cAAC,IAAD,CACEC,cAAe,CAAEC,KAAM,GAAIC,OAAQ,IACnCC,SAAU,SAAAC,GACR,IAAMC,EAAS,GAoBf,OAnBKD,EAAOH,KAEAG,EAAOF,OAGhB,0HAA8DI,KAC7DF,EAAOH,MAMR,8EAA8EK,KAC7EF,EAAOF,UAGTG,EAAOH,OACL,iiBARFG,EAAOJ,KACL,kcAPFI,EAAOH,OAAS,oGAFhBG,EAAOJ,KAAO,oGAkBTI,GAGTN,SAAU,SAACK,EAAD,GAA2C,IAAhCG,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAClCT,EAASK,GACTG,GAAc,GACdC,KA7BJ,SAgCG,gBACCJ,EADD,EACCA,OACAK,EAFD,EAECA,QACAJ,EAHD,EAGCA,OACAK,EAJD,EAICA,aACAC,EALD,EAKCA,aACAC,EAND,EAMCA,aAND,OAQC,eAAC3B,EAAD,CAAMc,SAAUY,EAAhB,UACE,eAACtB,EAAD,WACE,cAACM,EAAD,mBACA,cAACR,EAAD,CACE0B,KAAK,OACLZ,KAAK,OACLa,YAAY,qBACZC,SAAUL,EACVM,MAAOZ,EAAOH,OAEfQ,EAAQR,MAAQI,EAAOJ,MAAQ,cAACR,EAAD,UAAQY,EAAOJ,UAEjD,eAACZ,EAAD,WACE,cAAC,EAAD,qBACA,cAACF,EAAD,CACE0B,KAAK,MACLZ,KAAK,SACLa,YAAY,aACZC,SAAUL,EACVM,MAAOZ,EAAOF,SAEfO,EAAQP,QAAUG,EAAOH,QAAU,cAACT,EAAD,UAAQY,EAAOH,YAErD,cAACX,EAAD,CACEsB,KAAK,SACLI,SACEL,GAAgC,KAAhBR,EAAOH,MAAiC,KAAlBG,EAAOF,OAHjD,gC,+BClEGgB,EAAOxC,IAAOyC,GAAV,mDAIJC,EAAO1C,IAAO2C,GAAV,8KAWJ9B,EAASb,IAAOc,OAAV,yZCdJ,SAAS8B,EAAT,GAAmD,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,gBAC7C,OACE,cAACN,EAAD,UACKK,EAASE,KAAI,gBAAGxB,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQwB,EAAjB,EAAiBA,GAAjB,OACZ,eAACN,EAAD,WACGnB,EADH,KACWC,EACT,cAAC,EAAD,CACIW,KAAK,SACLc,QAAS,kBAAKH,EAAgBE,IAFlC,sBAFSA,QAiBrBnC,EAAOqC,UAAY,CACjBD,QAASE,IAAUC,KAAKC,YCvBnB,IAAMC,EAActD,IAAOU,MAAV,+KAUX6C,EAAcvD,IAAOY,MAAV,uFCTT,SAAS4C,EAAT,GAAoC,IAAnBlB,EAAkB,EAAlBA,MAAOD,EAAW,EAAXA,SACnC,OACI,eAACkB,EAAD,mCAEI,cAACD,EAAD,CACInB,KAAK,OACLG,MAAOA,EACPD,SAAUA,O,YCsFXoB,E,4MAvFbC,MAAQ,CACNb,SAAUc,EACVC,OAAQ,GACRrC,KAAM,GACNC,OAAQ,I,EAyBVqC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEH,OAAQE,EAAME,OAAO1B,S,EAGvC2B,mBAAqB,WACnB,MAA6B,EAAKP,MAA1Bb,EAAR,EAAQA,SACFqB,EADN,EAAkBN,OACcO,cAEhC,OAAOtB,EAASe,QAAO,SAAAQ,GAAO,OAC5BA,EAAQ7C,KAAK4C,cAAcE,SAASH,O,EAIxCI,cAAgB,SAAAC,GACd,EAAKR,UAAS,SAAAS,GAAS,MAAK,CAC1B3B,SAAU2B,EAAU3B,SAASe,QAAO,SAAAQ,GAAO,OAAIA,EAAQpB,KAAOuB,U,EAIlEE,WAAa,YAAuB,IAApBlD,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACd4C,EAAU,CACdpB,GAAI0B,cACJnD,OACAC,UAGE,EAAKkC,MAAMb,SAAS8B,MAAK,SAAAP,GAAO,OAAIA,EAAQ7C,OAASA,KACvDqD,MAAM,GAAD,OAAIrD,EAAJ,6BAIP,EAAKwC,UAAS,gBAAGlB,EAAH,EAAGA,SAAH,MAAmB,CAC/BA,SAAS,CAAEuB,GAAH,mBAAevB,S,uDAtD3B,WACE,IAAMuB,EAAUS,aAAaC,QAAQ,YAC/BC,EAAgBC,KAAKC,MAAMb,GAE7BW,GACFG,KAAKnB,SAAS,CAAElB,SAAUkC,M,gCAI9B,SAAoBP,GAClB,IAAMJ,EAAUY,KAAKG,UAAUD,KAAKxB,MAAMb,UACtCuB,IAAYI,EAAU3B,UACxBgC,aAAaO,QAAQ,WAAYhB,K,oBA8CrC,WACE,MAA4Bc,KAAKxB,MAA1Bb,EAAP,EAAOA,SAAUe,EAAjB,EAAiBA,OACXyB,EAAkBH,KAAKjB,qBAC7B,OACE,mCACC,eAAC,EAAD,WACC,2CACA,cAAC7C,EAAD,CAAayB,SAAUA,EAAUxB,SAAU6D,KAAKT,aAEhD,0CACA,cAACjB,EAAD,CAAQlB,MAAOsB,EAAQvB,SAAU6C,KAAKrB,eACtC,cAACjB,EAAD,CACEC,SAAUwC,EACVvC,gBAAiBoC,KAAKZ,yB,GA/EdgB,aCUlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAeC,MAdL,CACZC,OAAQ,CACNC,MAAO,UACPC,MAAO,UACPC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,YAAa,SACbC,cAAe,YAMf,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.9c6318bd.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const PhoneBook = styled.div`\r\n  max-width: 600px;\r\n  margin-top: 30px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding: 15px 30px;\r\n  background-color: rgb(207, 86, 255);\r\n  box-shadow: 0 15px 15px rgba(0, 0, 0, 0.55);\r\n  border-radius: 10px;\r\n  width: 420px;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  /* font-size: 50px; */\r\n`;\r\n","import { Title, PhoneBook } from \"./Container.styled\";\r\n\r\nconst Container = ({title, children}) => {\r\n    return (\r\n        <PhoneBook>\r\n            {title && <Title>{title}</Title>}\r\n                {children}\r\n        </PhoneBook>\r\n    )\r\n}\r\n\r\nexport default Container;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Form = styled.form`\r\n  flex-direction: column;\r\n  border-radius: 15px;\r\n  background-color: purple;\r\n  padding: 25px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: 200px;\r\n  padding: 5px 10px;\r\n  border-radius: 10px;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 14px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  margin-bottom: 20px;\r\n  font-size: 18px;\r\n  font-weight: 400;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  width: max-content;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  cursor: pointer;\r\n  padding: 5px 10px;\r\n  border: none;\r\n  outline: none;\r\n  border-radius: 10px;\r\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);\r\n  transition: transform 0.25s cubic-bezier(0.77, 0, 0.175, 1);\r\n  font-size: large;\r\n  background-color: rgb(192, 138, 243);\r\n  color: purple;\r\n\r\n  &:hover {\r\n    background-color: rgb(177 117 250);\r\n    transform: scale(1.05);\r\n    border: none;\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const Error = styled.span`\r\n  font-size: 11px;\r\n  left: 400px;\r\n  bottom: 0px;\r\n  color: coral;\r\n  margin: 10px;\r\n`;\r\n\r\nexport const Name = styled.p`\r\n  color: white;\r\n`;\r\n\r\nexport const Number = styled.p`\r\n  color: white;\r\n`;\r\n","import { Formik } from 'formik';\r\nimport { Form, Input, Label, Button, Error, Name, Number } from \"./ContactForm.styled\";\r\n\r\nexport default function ContactForm({ onSubmit }) {\r\n  return (\r\n    <Formik\r\n      initialValues={{ name: '', number: '' }}\r\n      validate={values => {\r\n        const errors = {};\r\n        if (!values.name) {\r\n          errors.name = 'Обязательное поле';\r\n        } else if (!values.number) {\r\n          errors.number = 'Обязательное поле';\r\n        } else if (\r\n          !/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/i.test(\r\n            values.name,\r\n          )\r\n        ) {\r\n          errors.name =\r\n            \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\";\r\n        } else if (\r\n          !/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/i.test(\r\n            values.number,\r\n          )\r\n        ) {\r\n          errors.number =\r\n            'Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +';\r\n        }\r\n        return errors;\r\n      }}\r\n      \r\n      onSubmit={(values, { setSubmitting, resetForm }) => {\r\n        onSubmit(values);\r\n        setSubmitting(false);\r\n        resetForm();\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        touched,\r\n        errors,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit}>\r\n          <Label>\r\n            <Name>Name</Name>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"Patricia Manterola\"\r\n              onChange={handleChange}\r\n              value={values.name}\r\n            />\r\n            {touched.name && errors.name && <Error>{errors.name}</Error>}\r\n          </Label>\r\n          <Label>\r\n            <Number>Number</Number>\r\n            <Input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              placeholder=\"0669365879\"\r\n              onChange={handleChange}\r\n              value={values.number}\r\n            />\r\n            {touched.number && errors.number && <Error>{errors.number}</Error>}\r\n          </Label>\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={\r\n              isSubmitting || values.name === '' || values.number === ''\r\n            }\r\n          >\r\n            Add contacts\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const List = styled.ul`\r\n  padding: 10px 30px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 16px;\r\n  color: white;\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 8px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin-left: 20px;\r\n  cursor: pointer;\r\n  padding: 5px 15px;\r\n  border: none;\r\n  outline: none;\r\n  border-radius: 10px;\r\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);\r\n  transition: transform 0.25s cubic-bezier(0.77, 0, 0.175, 1);\r\n  color: purple;\r\n\r\n  &:hover {\r\n    background-color: rgb(243, 65, 65);\r\n    transform: scale(1.05);\r\n    border: none;\r\n    outline: none;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types'\r\nimport { List, Item, Button } from './ContactList.styled'\r\n\r\nexport default function ContactList({contacts, onDeleteContact}) {\r\n  return (\r\n    <List>\r\n        {contacts.map(({ name, number, id }) =>\r\n          <Item key={id}>\r\n            {name}: {number}\r\n            <Button\r\n                type=\"button\"\r\n                onClick={() =>onDeleteContact(id)}>\r\n                Delete\r\n            </Button>\r\n          </Item>\r\n        )}\r\n    </List>\r\n  )\r\n}\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};","import styled from \"@emotion/styled\";\r\n\r\nexport const InputFilter = styled.input`\r\n  padding: 5px 10px;\r\n  border-radius: 10px;\r\n  border: none;\r\n  outline: none;\r\n  margin-left: 10px;\r\n  margin-bottom: 20px;\r\n  margin-top: 5px;\r\n`;\r\n\r\nexport const LabelFilter = styled.label`\r\n  color: purple;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n`;\r\n","import PropTypes from 'prop-types'\r\nimport { InputFilter, LabelFilter } from './Filter.styled'\r\n\r\nexport default function Filter({value, onChange}) {\r\n    return (\r\n        <LabelFilter>\r\n            Find contacts by name\r\n            <InputFilter\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n        </LabelFilter>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};","import React, { Component } from \"react\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport Container from \"../Container/Container\";\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport ContactList from \"../ContactList/ContactList\";\r\nimport Filter from \"../Filter/Filter\";\r\nimport contactsList from \"../data/contacts.json\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: contactsList,\r\n    filter: '',\r\n    name: '',\r\n    number: '',\r\n  };\r\n  \r\n  componentDidMount() {\r\n    const contact = localStorage.getItem('contacts');\r\n    const parsedContact = JSON.parse(contact);\r\n\r\n    if (parsedContact) {\r\n      this.setState({ contacts: parsedContact });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate( prevState) {\r\n    const contact = JSON.stringify(this.state.contacts);\r\n    if (contact !== prevState.contacts) {\r\n      localStorage.setItem('contacts', contact);\r\n    }\r\n  }\r\n\r\n// Возьми свое решение задания из предыдущей домашней работы и добавь хранение контактов телефонной книги в localStorage. Используй методы жизненного цикла.\r\n\r\n// При добавлении и удалении контакта, контакты сохраняются в локальное хранилище.\r\n// При загрузке приложения, контакты, если таковые есть, считываются из локального хранилища и записываются в состояние.\r\n\r\n  \r\n  changeFilter = event => {\r\n    this.setState({ filter: event.target.value });\r\n  };\r\n\r\n  getVisibleContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n  deleteContact = contactId => {\r\n    this.setState(prevState => ({\r\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\r\n    }));\r\n  };\r\n\r\n  addContact = ({ name, number }) => {\r\n    const contact = {\r\n      id: uuid(),\r\n      name,\r\n      number,\r\n    };\r\n    \r\n    if (this.state.contacts.find(contact => contact.name === name)) {\r\n      alert(`${name} is already in contacts.`);\r\n      return;\r\n    }\r\n\r\n    this.setState(({ contacts }) => ({\r\n      contacts: [contact, ...contacts],\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const {contacts, filter } = this.state;\r\n    const visibleContacts = this.getVisibleContacts();\r\n    return (\r\n      <>\r\n       <Container>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm contacts={contacts} onSubmit={this.addContact} />\r\n\r\n        <h2>Contacts</h2>\r\n        <Filter value={filter} onChange={this.changeFilter} />\r\n        <ContactList\r\n          contacts={visibleContacts}\r\n          onDeleteContact={this.deleteContact}\r\n        />\r\n      </Container>\r\n      </>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"@emotion/react\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\n\nconst theme = {\n  colors: {\n    white: \"#ffffff\",\n    black: \"#010101\",\n    green: \"#4caf50\",\n    red: \"#f44336\",\n    blue: \"#2196f3\",\n    primaryText: \"212121\",\n    secondaryText: \"#757575\",\n  },\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}